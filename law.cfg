[core]

# inherit from the columnflow configuration file
inherit: $CF_BASE/law.cfg


[modules]

columnflow.tasks.cms.external
columnflow.tasks.cms.inference
hbw.tasks.{inspection,ml,inference,plotting,wrapper}



[logging]

# Options: INFO, WARNING, DEBUG
law: INFO
luigi-interface: INFO
gfal2: WARNING
columnflow.columnar_util-perf: INFO

[analysis]

default_analysis: hbw.analysis.hbw_merged.hbw_merged
default_config: c17
default_dataset: ggHH_kl_1_kt_1_sl_hbbhww_powheg

production_modules: columnflow.production.{categories,processes,pileup,normalization,seeds}, hbw.production.{weights,features,ml_inputs,categories,gen_hbw_decay,neutrino}, hbw.ml.stats
calibration_modules: columnflow.calibration.jets, hbw.calibration.default
selection_modules: hbw.selection.{common,sl,dl}
categorization_modules: hbw.selection.categories
ml_modules: hbw.ml.{base,dense_classifier,dl,sl_res}
inference_modules: hbw.inference.{derived,dl,sl_res}

# namespace of all columnflow tasks
cf_task_namespace: cf

# default sandbox for main tasks with standard packages for columnar processing
default_columnar_sandbox: bash::$CF_BASE/sandboxes/venv_columnar.sh

# whether or not the ensure_proxy decorator should be skipped, even if used by task's run methods
skip_ensure_proxy: False

# some remote workflow parameter defaults
htcondor_flavor: $CF_HTCONDOR_FLAVOR
htcondor_share_software: False
slurm_flavor: $CF_SLURM_FLAVOR
slurm_partition: $CF_SLURM_PARTITION

# ChunkedIOHandler defaults
chunked_io_chunk_size: 100000
chunked_io_pool_size: 2
chunked_io_debug: False

# whether to log runtimes of array functions by default
log_array_function_runtime: False

# Tasks for which outputs will be checked for non-finite values before saving them to disk
check_finite_output: cf.CalibrateEvents, cf.SelectEvents, cf.ProduceColumns, cf.PrepareMLEvents, cf.MLEvaluation, cf.UniteColumns

# csv list of task families that inherit from ChunkedReaderMixin and whose input columns should be
# checked (raising an exception) for overlaps between fields when created a merged input array
check_overlapping_inputs: None

[outputs]

# list of all used file systems
wlcg_file_systems: wlcg_fs, wlcg_fs_desy, wlcg_fs_cernbox, wlcg_fs_desy_store, wlcg_fs_infn_redirector, wlcg_fs_global_redirector

# list of file systems used by columnflow.tasks.external.GetDatasetLFNs.iter_nano_files to
# look for the correct fs per nano input file (in that order)
lfn_sources: wlcg_fs_desy_store, wlcg_fs_infn_redirector, wlcg_fs_global_redirector, local_fs

# output locations per task family
# for local targets : "local[, STORE_PATH]"
# for remote targets: "wlcg[, WLCG_FS_NAME]"
# cf.BundleRepo: wlcg
# cf.BundleSoftware: wlcg
# cf.BundleBashSandbox: wlcg
# cf.BundleCMSSWSandbox: wlcg
# cf.BundleExternalFiles: wlcg
# NOTE: at some point, switch output location of more tasks to a common space (wlcg or local)
# cf.GetDatasetLFNs: wlcg
# cf.CalibrateEvents: wlcg
# cf.SelectEvents: wlcg
# cf.ReduceEvents: wlcg
# cf.MergeReducedEvents: wlcg
# cf.ProduceColumns: wlcg
# cf.PrepareMLEvents: wlcg
# cf.MergeMLEvents: wlcg
# cf.MLTraining: wlcg
# cf.MLEvaluation: wlcg

# To set defaults on a per-task basis
# NOTE: this does override defaults defined in the config, but it does not overwrite parameters
#       when the parameter has already been set e.g. by another task requiring this task

# TODO: to share some outputs over multiple analyses
# [luigi_cf.GetDatasetLFNs]

# analysis: hbw.analysis.hbw_merged.hbw_merged


# [luigi_cf.CalibrateEvents]

# analysis: hbw.analysis.hbw_merged.hbw_merged


[luigi_cf.ReduceEvents]

pilot: True


[luigi_cf.MergeReductionStats]

# streamline task requirements by requiring all files to determine ReductionStats
n-inputs: -1

# TODO: it would be good if these parameters could be overwritten even when required from MLTraining
[luigi_cf.PrepareMLEvents]

htcondor-gpus: 0
htcondor-memory: -1
max-runtime: 4h


[luigi_cf.MergeMLEvents]

htcondor-gpus: 0
htcondor-memory: -1
max-runtime: 4h


# MLTraining defaults: would be nice to automatically submit to GPUs etc. but this might lead
# to running the MLTraining reqs also on GPU...
[luigi_cf.MLTraining]

# workflow: htcondor
# htcondor-gpus: 1
# htcondor-memory: 40000
# max-runtime: 24h


[job]

job_file_dir: $CF_JOB_BASE
job_file_dir_cleanup: False

# storage element (SE) and output directory on that SE for crab's internal output
# (crab might not even move files there, but it is strictly required for crab's job submission)
crab_storage_element: $CF_CRAB_STORAGE_ELEMENT
crab_base_directory: $CF_CRAB_BASE_DIRECTORY

# lcg setup file sourced in remote jobs to access gfal tools
remote_lcg_setup: /cvmfs/grid.cern.ch/centos7-ui-200122/etc/profile.d/setup-c7-ui-python3-example.sh


[local_fs]

base: /

[wlcg_fs]

base: &::wlcg_fs_desy::base
create_file_dir: True
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 50GB


[wlcg_fs_desy]

xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2/store/user/$CF_CERN_USER/$CF_STORE_NAME
gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2/store/user/$CF_CERN_USER/$CF_STORE_NAME
base: &::gsiftp_base


[wlcg_fs_cernbox]

xrootd_base: root://eosuser.cern.ch/eos/user/$CF_CERN_USER_FIRSTCHAR/$CF_CERN_USER/$CF_STORE_NAME
base: &::xrootd_base


[wlcg_fs_desy_store]

xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2
gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2
base: &::xrootd_base
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 15GB
cache_global_lock: True
cache_mtime_patience: -1


[wlcg_fs_infn_redirector]

base: root://xrootd-cms.infn.it/
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 15GB
cache_global_lock: True
cache_mtime_patience: -1


[wlcg_fs_global_redirector]

base: root://cms-xrd-global.cern.ch/
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 15GB
cache_global_lock: True
cache_mtime_patience: -1


[wlcg_fs_desy_mfrahm]

xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2/store/user/mfrahm/hbw_store
gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2/store/user/mfrahm/hbw_store
base: &::gsiftp_base


[wlcg_fs_desy_apaasch]

xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2/store/user/apaasch/hbw_store
gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2/store/user/apaasch/hbw_store
base: &::gsiftp_base


[wlcg_fs_desy_mrieger]

xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2/store/user/mrieger/hbt_store
gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2/store/user/mrieger/hbt_store
base: &::gsiftp_base


[wlcg_fs_desy_nprouvos]

xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2/store/user/nprouvos/hbt_store
gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2/store/user/nprouvos/hbt_store
base: &::gsiftp_base


[wlcg_fs_desy_bwieders]

xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2/store/user/bwieders/hbt_store
gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2/store/user/bwieders/hbt_store
base: &::gsiftp_base
